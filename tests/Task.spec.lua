--- Tests for the Task module
--
-- @version 0.1.0, 2020-11-18
-- @since 0.1

return function()
	local module = game:GetService("ReplicatedStorage"):WaitForChild("Roads")
	local Task = require(module:WaitForChild("Task"))
	local TaskStatus = require(module:WaitForChild("TaskStatus"))

	describe("Task", function()
		it("should be able to be instantiated", function()
			local task = Task.new()
			expect(task).to.be.ok()
		end)

		it("should accept a function when being constructed", function()
			local task
			expect(function()
				task = Task.new(function() end)
			end).never.to.throw()
			task:Destroy()
		end)

		it("should allow initializing", function()
			local task = Task.new()
			expect(function()
				task:Initialize(function() end)
			end).never.to.throw()
			task:Destroy()
		end)

		it("should only allow initializing once", function()
			local task = Task.new()
			task:Initialize(function() end)
			expect(function() task:Initialize() end).to.throw(
				"task already initialized")
			task:Destroy()
			task = Task.new(function() end)
			expect(function() task:Initialize() end).to.throw(
				"task already initialized")
			task:Destroy()
		end)

		it("should intialize only with a function", function()
			local task = Task.new()
			expect(function() task:Initialize() end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got nil")
			task:Destroy()
			task = Task.new()
			expect(function() task:Initialize(false) end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got boolean")
			task:Destroy()
			task = Task.new()
			expect(function() task:Initialize(0) end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got number")
			task:Destroy()
			task = Task.new()
			expect(function() task:Initialize("") end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got string")
			task:Destroy()
			task = Task.new()
			expect(function()
				task:Initialize(Instance.new("Folder"))
			end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got userdata")
			task:Destroy()
			task = Task.new()
			expect(function() task:Initialize(
				coroutine.create(function() end))
			end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got thread")
			task:Destroy()
			task = Task.new()
			expect(function() task:Initialize({}) end).to.throw(
				"invalid arugment #1 to 'Initialize' (function expected, got table")
			task:Destroy()
			task = Task.new()
			expect(function()
				task:Initialize(function() end)
			end).never.to.throw()
			task:Destroy()
		end)

		it("should provide an ID", function()
			local task = Task.new()
			expect(task:ID()).to.be.ok()
		end)

		it("should initially have the created status", function()
			local task = Task.new()
			expect(task:Status()).to.equal(TaskStatus.Created)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(false)
			task:Destroy()
		end)

		it("should have the pending status after being started", function()
			local task = Task.new(function() end)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(false)
			task:Start()
			expect(task:Status()).to.equal(TaskStatus.Pending)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(true)
			task:Destroy()
		end)

		it("should have the successful status after finishing", function()
			local task = Task.new(function() end)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(false)
			task:Start()
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(true)
			task:Wait()
			expect(task:Status()).to.equal(TaskStatus.Successful)
			expect(task:Successful()).to.equal(true)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(true)
			expect(task:Started()).to.equal(true)
			task:Destroy()
		end)

		it("should have the canceled status after being canceled", function()
			local task = Task.new(function() end)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(false)
			task:Start()
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(true)
			task:Cancel()
			expect(task:Status()).to.equal(TaskStatus.Canceled)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(true)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(true)
			expect(task:Started()).to.equal(true)
			task:Destroy()
		end)

		it("should have the faulted status after an error occurs", function()
			local task = Task.new(function() error("Oh no!") end)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(false)
			task:Start()
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(false)
			expect(task:Completed()).to.equal(false)
			expect(task:Started()).to.equal(true)
			task:Wait()
			expect(task:Status()).to.equal(TaskStatus.Faulted)
			expect(task:Successful()).to.equal(false)
			expect(task:Canceled()).to.equal(false)
			expect(task:Faulted()).to.equal(true)
			expect(task:Completed()).to.equal(true)
			expect(task:Started()).to.equal(true)
			task:Destroy()
		end)

		it("should start without blocking", function()
			local activated = false
			local task = Task.new(function() activated = true end)
			expect(activated).to.equal(false)
			task:Start()
			expect(activated).to.equal(false)
			task:Destroy()
		end)

		it("should allow waiting on execution", function()
			local activated = false
			local task = Task.new(function() activated = true end)
			task:Start()
			expect(activated).to.equal(false)
			task:Wait()
			expect(activated).to.equal(true)
			task:Destroy()
		end)

		it("should succeed and exectute another task", function()
			local activated1 = false
			local activated2 = false
			local task1 = Task.new(function()
				activated1 = true
				expect(activated2).to.equal(false)
			end)
			local task2 = task1:Then(function()
				expect(activated1).to.equal(true)
				activated2 = true
			end)
			task1:Start()
			expect(activated1).to.equal(false)
			expect(activated2).to.equal(false)
			task1:Wait()
			expect(activated1).to.equal(true)
			task2:Wait()
			expect(activated2).to.equal(true)
			task1:Destroy()
			task2:Destroy()
		end)

		it("should fault and then execute a fault handler", function()
			local activated = false
			local task = Task.new(function() error("Uh oh!") end)
			local _, fault = task:Then(nil, function()
				activated = true
			end)
			task:Start()
			expect(activated).to.equal(false)
			fault:Wait()
			expect(activated).to.equal(true)
			task:Destroy()
			fault:Destroy()
		end)

		it("should cancel future tasks when canceled", function()
			local activated = false
			local task1 = Task.new(function() activated = true end)
			local task2 = task1:Then(function() activated = true end)
			task1:Cancel()
			expect(task1:Canceled()).to.equal(true)
			expect(task2:Canceled()).to.equal(true)
			task2:Wait()
			expect(activated).to.equal(false)
			task1:Destroy()
			task2:Destroy()
		end)

		it("should fault future tasks when faulted", function()
			local activated = false
			local task1 = Task.new(function() error("Whoops!") end)
			local task2 = task1:Then(function() activated = true end)
			task1:Start()
			expect(activated).to.equal(false)
			task1:Wait()
			expect(task1:Faulted()).to.equal(true)
			expect(task2:Faulted()).to.equal(true)
			task2:Wait()
			expect(activated).to.equal(false)
			task1:Destroy()
			task2:Destroy()
		end)

		it("should catch when tasks fault", function()
			local activated = false
			local task = Task.new(function() error("Help!") end)
			local catch = task:Catch(function() activated = true end)
			task:Start()
			expect(activated).to.equal(false)
			catch:Wait()
			expect(activated).to.equal(true)
			task:Destroy()
			catch:Destroy()
		end)

		it("should execute finally when when tasks succeed", function()
			local activated = false
			local task = Task.new(function() end)
			local final = task:Finally(function() activated = true end)
			task:Start()
			expect(activated).to.equal(false)
			final:Wait()
			expect(activated).to.equal(true)
			task:Destroy()
			final:Destroy()
		end)

		it("should execute finally when when tasks fault", function()
			local activated = false
			local task = Task.new(function() error("Oops!") end)
			local final = task:Finally(function() activated = true end)
			task:Start()
			expect(activated).to.equal(false)
			final:Wait()
			expect(activated).to.equal(true)
			task:Destroy()
			final:Destroy()
		end)

		it("should execute finally when when tasks cancel", function()
			local activated = false
			local task = Task.new(function() end)
			local final = task:Finally(function() activated = true end)
			task:Cancel()
			expect(activated).to.equal(false)
			final:Wait()
			expect(activated).to.equal(true)
			task:Destroy()
			final:Destroy()
		end)

		it("should accept parameters when starting", function()
			local value
			local passed = 1
			local task = Task.new(function(arg) value = arg end)
			task:Start(passed)
			expect(value).never.to.be.ok()
			task:Wait()
			expect(value).to.equal(passed)
			task:Destroy()
		end)

		it("should present results when successful", function()
			local value = 1
			local task = Task.new(function() return value end)
			task:Start()
			expect(task:Results()).never.to.be.ok()
			task:Wait()
			expect(task:Results()).to.equal(value)
		end)

		it("should present errors when faulted", function()
			local message = "A problem happened!"
			local task = Task.new(function() error(message) end)
			task:Start()
			expect(task:Results()).never.to.be.ok()
			task:Wait()
			expect(task:Results()).to.equal(message)
		end)

		it("should pass results when successful", function()
			local value = 1
			local task1 = Task.new(function() return value end)
			local task2 = task1:Then(function(arg) return arg end)
			task1:Start()
			expect(task1:Results()).never.to.be.ok()
			expect(task2:Results()).never.to.be.ok()
			task1:Wait()
			expect(task1:Results()).to.equal(value)
			task2:Wait()
			expect(task2:Results()).to.equal(value)
			task1:Destroy()
			task2:Destroy()
		end)

		it("should pass errors when faulted", function()
			local message = "Fix this!"
			local task1 = Task.new(function() error(message) end)
			local catch = task1:Catch(function(arg) return arg end)
			task1:Start()
			expect(task1:Results()).never.to.be.ok()
			expect(catch:Results()).never.to.be.ok()
			task1:Wait()
			expect(task1:Results()).to.equal(message)
			catch:Wait()
			expect(catch:Results()).to.equal(message)
			task1:Destroy()
			catch:Destroy()
		end)
	end)
end
